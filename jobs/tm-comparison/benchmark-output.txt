JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 1 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",1,1,1308.3053209034003,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",1,1,1413.6170311681633,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",1,1,1251.5439772349725,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",1,1,9.84849074486688,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",1,1,1033.332964097559,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 10 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",10,1,1341.750829035348,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",10,1,2714.0958509112907,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",10,1,8364.605248662356,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",10,1,6404.371404684587,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",10,1,9672.706615399324,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 50 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",50,1,1403.550988815414,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",50,1,2913.54325760277,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",50,1,26716.38939577194,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",50,1,15703.491313934297,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",50,1,44440.5805412395,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 100 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",100,1,1333.7996392271273,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",100,1,2643.382674751787,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",100,1,28846.631521492076,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",100,1,18653.18666075332,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",100,1,44744.3192227835,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 300 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",300,1,1184.9190529409148,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",300,1,2511.01589237392,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",300,1,31044.76076581333,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",300,1,16610.598147399436,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",300,1,49797.36429148333,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 400 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",400,1,1176.7803581146366,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",400,1,2706.414743910953,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",400,1,27596.58240027492,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",400,1,17403.735826118344,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",400,1,55965.33062131578,NaN,"ops/s"
Wed 20 Jan 19:13:14 GMT 2016
Platform: Linux haverstraw 3.10.0-229.20.1.el7.x86_64 #1 SMP Tue Nov 3 19:10:07 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux
Processor: model name	: Intel(R) Core(TM) i7 CPU         930  @ 2.80GHz
Number of Cores: 4
Blog Text
=========
In this release we compare ourselves against four other leading open source competitor products with a view to checking that the release remains competitive. Results are produced using JMH (a micro benchmark harness created by the OpenJDK project team available from http://openjdk.java.net/projects/code-tools/jmh/). 

We have attempted to configure each product on an equal footing by choosing sensible defaults for each tunable parameter and by ensuring that recovery is enabled, although we do configure narayana with the journal store, which is our best performing transaction log storage mechanism. If you have any recommendations for other transaction managers or how to tune the configuration then please let us know so that we can update our test job. 

The benchmark runs a transaction containing two dummy resources.

We will let the figures speak for themselves, suffice to say that when more and more threads are thrown at the workload we scale better showing that we have excellent control over parallelism. The actual figures are: 

Threads           A           B           C           D    Narayana
      1        1308        1413        1251           9        1033
     10        1341        2714        8364        6404        9672
     50        1403        2913       26716       15703       44440
    100        1333        2643       28846       18653       44744
    300        1184        2511       31044       16610       49797
    400        1176        2706       27596       17403       55965

GENERATED IMAGE FILE TO /home/hudson/jobs/tm-comparison/workspace/benchmark.png
