JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 1 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",1,1,1342.1769496689465,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",1,1,1218.7965407702436,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",1,1,1348.8978647366423,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",1,1,9.828106412453916,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",1,1,1008.920070421624,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 10 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",10,1,1261.25623969207,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",10,1,2762.5404230589743,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",10,1,7328.48127758185,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",10,1,6926.697403928009,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",10,1,9701.262401210244,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 50 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",50,1,1330.6473342753716,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",50,1,2683.883104473931,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",50,1,30873.320714957285,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",50,1,16342.31955354719,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",50,1,41689.47579699596,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 100 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",100,1,1316.9567518546487,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",100,1,2637.650994731658,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",100,1,34651.29393794469,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",100,1,18821.13499794215,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",100,1,55443.75552199173,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 300 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",300,1,1336.1621931018894,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",300,1,2673.421537446508,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",300,1,28540.6514535138,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",300,1,16341.206721977216,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",300,1,53982.89418846434,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 400 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",400,1,1110.5699139743272,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",400,1,2739.701505770613,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",400,1,29434.221569741218,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",400,1,16570.10168955927,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",400,1,55946.857008899875,NaN,"ops/s"
Tue 19 Jan 15:19:16 GMT 2016
Platform: Linux haverstraw 3.10.0-229.20.1.el7.x86_64 #1 SMP Tue Nov 3 19:10:07 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux
Processor: model name	: Intel(R) Core(TM) i7 CPU         930  @ 2.80GHz
Number of Cores: 4
Blog Text
=========
In this release we compare ourselves against four other leading open source competitor products with a view to checking that the release remains competitive. Results are produced using JMH (a micro benchmark harness created by the OpenJDK project team available from http://openjdk.java.net/projects/code-tools/jmh/). 

We have attempted to configure each product on an equal footing by choosing sensible defaults for each tunable parameter and by ensuring that recovery is enabled, although we do configure narayana with the journal store, which is our best performing transaction log storage mechanism. If you have any recommendations for other transaction managers or how to tune the configuration then please let us know so that we can update our test job. 

The benchmark runs a transaction containing two dummy resources.

We will let the figures speak for themselves, suffice to say that when more and more threads are thrown at the workload we scale better showing that we have excellent control over parallelism. The actual figures are: 

Threads           A           B           C           D    Narayana
      1        1342        1218        1348           9        1008
     10        1261        2762        7328        6926        9701
     50        1330        2683       30873       16342       41689
    100        1316        2637       34651       18821       55443
    300        1336        2673       28540       16341       53982
    400        1110        2739       29434       16570       55946

GENERATED IMAGE FILE TO /home/hudson/jobs/tm-comparison/workspace/benchmark.png
