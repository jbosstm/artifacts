JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 1 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",1,1,1320.7232972067209,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",1,1,1364.146400895848,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",1,1,1297.5960381598447,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",1,1,9.858716552996091,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",1,1,1251.1114101167623,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 10 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",10,1,1362.0866837832655,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",10,1,2833.64739655224,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",10,1,7873.225212285215,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",10,1,7004.885707015902,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",10,1,10937.653597635644,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 50 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",50,1,1381.5666600980326,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",50,1,2630.449190721546,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",50,1,32957.197032162076,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",50,1,16017.022518534794,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",50,1,45487.84521121932,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 100 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",100,1,1348.07725185917,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",100,1,2716.230873945276,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",100,1,28233.457057073312,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",100,1,18823.119532917997,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",100,1,66571.4849298548,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 300 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",300,1,1399.37174936156,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",300,1,2692.1626844119587,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",300,1,27068.752393246414,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",300,1,16557.592346814123,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",300,1,69785.24951608187,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 400 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",400,1,1191.9301646239494,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",400,1,2590.723596487111,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",400,1,31925.25247573915,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",400,1,16862.15816431819,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",400,1,65073.976931404315,NaN,"ops/s"
Thu 21 Jan 16:32:21 GMT 2016
Platform: Linux haverstraw 3.10.0-229.20.1.el7.x86_64 #1 SMP Tue Nov 3 19:10:07 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux
Processor: model name	: Intel(R) Core(TM) i7 CPU         930  @ 2.80GHz
Number of Cores: 4
Blog Text
=========
In this release we compare ourselves against four other leading open source competitor products with a view to checking that the release remains competitive. Results are produced using JMH (a micro benchmark harness created by the OpenJDK project team available from http://openjdk.java.net/projects/code-tools/jmh/). 

We have attempted to configure each product on an equal footing by choosing sensible defaults for each tunable parameter and by ensuring that recovery is enabled, although we do configure narayana with the journal store, which is our best performing transaction log storage mechanism. If you have any recommendations for other transaction managers or how to tune the configuration then please let us know so that we can update our test job. 

The benchmark runs a transaction containing two dummy resources.

We will let the figures speak for themselves, suffice to say that when more and more threads are thrown at the workload we scale better showing that we have excellent control over parallelism. The actual figures are: 

Threads           A           B           C           D    Narayana
      1        1320        1364        1297           9        1251
     10        1362        2833        7873        7004       10937
     50        1381        2630       32957       16017       45487
    100        1348        2716       28233       18823       66571
    300        1399        2692       27068       16557       69785
    400        1191        2590       31925       16862       65073

GENERATED IMAGE FILE TO /home/hudson/jobs/tm-comparison/workspace/benchmark.png
