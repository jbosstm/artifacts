JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 1 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",1,1,1262.4624207505178,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",1,1,1237.367215182818,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",1,1,1300.4326670156672,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",1,1,9.861544256604768,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",1,1,1252.6205472969782,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 10 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",10,1,1424.559660893085,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",10,1,2638.241866747718,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",10,1,8124.054785252752,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",10,1,6684.183544538115,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",10,1,11592.408538502472,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 50 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",50,1,1417.1556832540791,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",50,1,2633.346363167303,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",50,1,31908.090999118012,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",50,1,16136.836125712733,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",50,1,45855.605241592544,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 100 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",100,1,1432.779778783227,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",100,1,2717.4536545137685,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",100,1,32697.669151633952,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",100,1,19234.791784479745,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",100,1,72065.46574897511,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 300 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",300,1,1200.9792400232927,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",300,1,2534.421106318944,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",300,1,30701.18173316649,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",300,1,16374.11870367268,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",300,1,67040.56033125502,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 400 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",400,1,1255.0143529914749,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",400,1,2578.7345631022667,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",400,1,30971.35193050142,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",400,1,16407.737163771173,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",400,1,60074.18382613999,NaN,"ops/s"
Fri 11 Mar 17:30:43 GMT 2016
Platform: Linux haverstraw 3.10.0-229.20.1.el7.x86_64 #1 SMP Tue Nov 3 19:10:07 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux
Processor: model name	: Intel(R) Core(TM) i7 CPU         930  @ 2.80GHz
Number of Cores: 4
Blog Text
=========
In this release we compare ourselves against four other leading open source competitor products with a view to checking that the release remains competitive. Results are produced using JMH (a micro benchmark harness created by the OpenJDK project team available from http://openjdk.java.net/projects/code-tools/jmh/). 

We have attempted to configure each product on an equal footing by choosing sensible defaults for each tunable parameter and by ensuring that recovery is enabled, although we do configure narayana with the journal store, which is our best performing transaction log storage mechanism. If you have any recommendations for other transaction managers or how to tune the configuration then please let us know so that we can update our test job. 

The benchmark runs a transaction containing two dummy resources.

We will let the figures speak for themselves, suffice to say that when more and more threads are thrown at the workload we scale better showing that we have excellent control over parallelism. The actual figures are: 

Threads           A           B           C           D    Narayana
      1        1262        1237        1300           9        1252
     10        1424        2638        8124        6684       11592
     50        1417        2633       31908       16136       45855
    100        1432        2717       32697       19234       72065
    300        1200        2534       30701       16374       67040
    400        1255        2578       30971       16407       60074

GENERATED IMAGE FILE TO /home/hudson/jobs/tm-comparison/workspace/benchmark.png
