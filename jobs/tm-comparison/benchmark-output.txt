JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 1 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",1,1,1288.8704057388638,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",1,1,1238.6196257337103,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",1,1,1344.9306577926752,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",1,1,9.850210699951946,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",1,1,1053.673291718269,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 10 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",10,1,1407.8630611114868,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",10,1,3049.7059605844347,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",10,1,8048.240896193441,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",10,1,6921.088724136158,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",10,1,9356.430762452452,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 50 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",50,1,1315.151435062516,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",50,1,2740.5942089346036,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",50,1,29825.014532978235,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",50,1,16915.780139995026,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",50,1,46445.21569676946,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 100 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",100,1,1402.5657301401582,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",100,1,2794.6890929424853,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",100,1,30675.24149673943,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",100,1,18457.604475233125,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",100,1,48892.66864358841,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 300 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",300,1,1123.916625961252,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",300,1,2717.199227279891,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",300,1,27972.190120150928,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",300,1,16525.451261144106,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",300,1,45046.973302822385,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 400 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",400,1,1243.1367106958305,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",400,1,2660.9245377419675,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",400,1,31581.259712252573,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",400,1,16959.41063951351,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",400,1,50463.33274318492,NaN,"ops/s"
Wed 20 Jan 12:04:27 GMT 2016
Platform: Linux haverstraw 3.10.0-229.20.1.el7.x86_64 #1 SMP Tue Nov 3 19:10:07 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux
Processor: model name	: Intel(R) Core(TM) i7 CPU         930  @ 2.80GHz
Number of Cores: 4
Blog Text
=========
In this release we compare ourselves against four other leading open source competitor products with a view to checking that the release remains competitive. Results are produced using JMH (a micro benchmark harness created by the OpenJDK project team available from http://openjdk.java.net/projects/code-tools/jmh/). 

We have attempted to configure each product on an equal footing by choosing sensible defaults for each tunable parameter and by ensuring that recovery is enabled, although we do configure narayana with the journal store, which is our best performing transaction log storage mechanism. If you have any recommendations for other transaction managers or how to tune the configuration then please let us know so that we can update our test job. 

The benchmark runs a transaction containing two dummy resources.

We will let the figures speak for themselves, suffice to say that when more and more threads are thrown at the workload we scale better showing that we have excellent control over parallelism. The actual figures are: 

Threads           A           B           C           D    Narayana
      1        1288        1238        1344           9        1053
     10        1407        3049        8048        6921        9356
     50        1315        2740       29825       16915       46445
    100        1402        2794       30675       18457       48892
    300        1123        2717       27972       16525       45046
    400        1243        2660       31581       16959       50463

GENERATED IMAGE FILE TO /home/hudson/jobs/tm-comparison/workspace/benchmark.png
