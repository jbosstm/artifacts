JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 1 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",1,1,1344.578573286353,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",1,1,1258.256203669101,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",1,1,1291.5376752399868,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",1,1,9.856237143027402,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",1,1,1266.1267870937781,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 10 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",10,1,1244.1117492417784,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",10,1,2798.606509915814,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",10,1,8183.820120247836,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",10,1,7000.829913549061,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",10,1,10908.559988005469,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 50 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",50,1,1213.4687539958186,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",50,1,2506.255890633821,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",50,1,29297.62594586329,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",50,1,15717.48322427403,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",50,1,44260.78545555307,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 100 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",100,1,1301.949736136068,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",100,1,2608.4458768165714,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",100,1,30060.906426671543,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",100,1,18067.02294524425,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",100,1,64896.496257468476,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 300 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",300,1,1272.365741263368,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",300,1,2593.0183194061137,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",300,1,28736.75286823714,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",300,1,16826.673801507706,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",300,1,64044.35417541439,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 400 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",400,1,1316.1470007841992,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",400,1,2659.5142108529412,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",400,1,27871.142487879137,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",400,1,17089.181221465613,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",400,1,66616.6193289056,NaN,"ops/s"
Fri 29 Jan 13:10:52 GMT 2016
Platform: Linux haverstraw 3.10.0-229.20.1.el7.x86_64 #1 SMP Tue Nov 3 19:10:07 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux
Processor: model name	: Intel(R) Core(TM) i7 CPU         930  @ 2.80GHz
Number of Cores: 4
Blog Text
=========
In this release we compare ourselves against four other leading open source competitor products with a view to checking that the release remains competitive. Results are produced using JMH (a micro benchmark harness created by the OpenJDK project team available from http://openjdk.java.net/projects/code-tools/jmh/). 

We have attempted to configure each product on an equal footing by choosing sensible defaults for each tunable parameter and by ensuring that recovery is enabled, although we do configure narayana with the journal store, which is our best performing transaction log storage mechanism. If you have any recommendations for other transaction managers or how to tune the configuration then please let us know so that we can update our test job. 

The benchmark runs a transaction containing two dummy resources.

We will let the figures speak for themselves, suffice to say that when more and more threads are thrown at the workload we scale better showing that we have excellent control over parallelism. The actual figures are: 

Threads           A           B           C           D    Narayana
      1        1344        1258        1291           9        1266
     10        1244        2798        8183        7000       10908
     50        1213        2506       29297       15717       44260
    100        1301        2608       30060       18067       64896
    300        1272        2593       28736       16826       64044
    400        1316        2659       27871       17089       66616

GENERATED IMAGE FILE TO /home/hudson/jobs/tm-comparison/workspace/benchmark.png
