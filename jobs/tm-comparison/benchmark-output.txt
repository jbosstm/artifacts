JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 1 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",1,1,1420.9651390008776,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",1,1,1246.3500857180593,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",1,1,1327.6821443889005,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",1,1,9.840635583620069,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",1,1,1253.4696142929945,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 10 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",10,1,1284.7416480432696,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",10,1,2720.540150823524,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",10,1,7857.00052394187,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",10,1,6844.399243988677,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",10,1,10888.623955929856,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 50 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",50,1,1311.291315003779,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",50,1,2621.7823976277027,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",50,1,30421.36182235599,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",50,1,15941.640780555836,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",50,1,46230.72978484879,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 100 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",100,1,1377.760803790519,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",100,1,2675.61343467184,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",100,1,30480.230058268105,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",100,1,17475.54077691338,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",100,1,74400.97409312453,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 300 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",300,1,1340.3804374245053,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",300,1,2801.98077707152,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",300,1,27109.386394675756,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",300,1,16954.606568426454,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",300,1,63660.274597738324,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 400 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",400,1,1207.2727607628112,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",400,1,2672.7881943314796,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",400,1,26802.88874108881,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",400,1,16700.89872497938,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",400,1,63980.358981546924,NaN,"ops/s"
Mon 29 Feb 17:12:06 GMT 2016
Platform: Linux haverstraw 3.10.0-229.20.1.el7.x86_64 #1 SMP Tue Nov 3 19:10:07 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux
Processor: model name	: Intel(R) Core(TM) i7 CPU         930  @ 2.80GHz
Number of Cores: 4
Blog Text
=========
In this release we compare ourselves against four other leading open source competitor products with a view to checking that the release remains competitive. Results are produced using JMH (a micro benchmark harness created by the OpenJDK project team available from http://openjdk.java.net/projects/code-tools/jmh/). 

We have attempted to configure each product on an equal footing by choosing sensible defaults for each tunable parameter and by ensuring that recovery is enabled, although we do configure narayana with the journal store, which is our best performing transaction log storage mechanism. If you have any recommendations for other transaction managers or how to tune the configuration then please let us know so that we can update our test job. 

The benchmark runs a transaction containing two dummy resources.

We will let the figures speak for themselves, suffice to say that when more and more threads are thrown at the workload we scale better showing that we have excellent control over parallelism. The actual figures are: 

Threads           A           B           C           D    Narayana
      1        1420        1246        1327           9        1253
     10        1284        2720        7857        6844       10888
     50        1311        2621       30421       15941       46230
    100        1377        2675       30480       17475       74400
    300        1340        2801       27109       16954       63660
    400        1207        2672       26802       16700       63980

GENERATED IMAGE FILE TO /home/hudson/jobs/tm-comparison/workspace/benchmark.png
