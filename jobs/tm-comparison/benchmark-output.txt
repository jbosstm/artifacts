JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 1 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",1,1,1304.5402912896666,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",1,1,1183.4441282136738,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",1,1,1338.0221992208549,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",1,1,9.832764973802922,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",1,1,1270.8069402367598,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 10 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",10,1,1438.7290670145765,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",10,1,2822.1919008225304,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",10,1,7662.122398380743,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",10,1,6848.801123677746,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",10,1,11076.45064672889,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 50 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",50,1,1372.5187732228787,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",50,1,2646.5702096634177,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",50,1,33967.93655642314,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",50,1,15616.700178940107,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",50,1,46787.24213271678,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 100 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",100,1,1279.6813882985582,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",100,1,2599.0595302240445,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",100,1,32777.14394264708,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",100,1,18905.964650874605,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",100,1,68136.05752158437,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 300 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",300,1,1292.80641979743,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",300,1,2634.442798346081,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",300,1,29276.342753485726,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",300,1,16876.833660139157,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",300,1,68220.66044292614,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 400 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",400,1,1241.350606211132,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",400,1,2626.155484853588,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",400,1,29539.52390118537,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",400,1,16917.509473717517,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",400,1,61681.86641823792,NaN,"ops/s"
Mon 29 Feb 15:15:53 GMT 2016
Platform: Linux haverstraw 3.10.0-229.20.1.el7.x86_64 #1 SMP Tue Nov 3 19:10:07 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux
Processor: model name	: Intel(R) Core(TM) i7 CPU         930  @ 2.80GHz
Number of Cores: 4
Blog Text
=========
In this release we compare ourselves against four other leading open source competitor products with a view to checking that the release remains competitive. Results are produced using JMH (a micro benchmark harness created by the OpenJDK project team available from http://openjdk.java.net/projects/code-tools/jmh/). 

We have attempted to configure each product on an equal footing by choosing sensible defaults for each tunable parameter and by ensuring that recovery is enabled, although we do configure narayana with the journal store, which is our best performing transaction log storage mechanism. If you have any recommendations for other transaction managers or how to tune the configuration then please let us know so that we can update our test job. 

The benchmark runs a transaction containing two dummy resources.

We will let the figures speak for themselves, suffice to say that when more and more threads are thrown at the workload we scale better showing that we have excellent control over parallelism. The actual figures are: 

Threads           A           B           C           D    Narayana
      1        1304        1183        1338           9        1270
     10        1438        2822        7662        6848       11076
     50        1372        2646       33967       15616       46787
    100        1279        2599       32777       18905       68136
    300        1292        2634       29276       16876       68220
    400        1241        2626       29539       16917       61681

GENERATED IMAGE FILE TO /home/hudson/jobs/tm-comparison/workspace/benchmark.png
