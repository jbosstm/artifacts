JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 1 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",1,1,1305.1460445184653,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",1,1,1269.9555110225701,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",1,1,1311.5568740432452,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",1,1,9.832555914670143,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",1,1,1329.6661925886478,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 10 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",10,1,1277.2451093074546,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",10,1,2638.5540528274228,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",10,1,8609.396105466409,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",10,1,6787.631588407316,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",10,1,11261.263542364988,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 50 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",50,1,1266.3004856744478,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",50,1,2644.5292386543974,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",50,1,31417.2914455602,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",50,1,17041.129636332495,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",50,1,49157.78300465009,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 100 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",100,1,1338.609886734253,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",100,1,2656.7386202436037,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",100,1,29279.853017365993,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",100,1,19105.416402942068,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",100,1,66509.80802574127,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 300 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",300,1,1227.7452397269153,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",300,1,2526.107427172996,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",300,1,36237.95638597694,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",300,1,16547.797337314976,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",300,1,68671.18622583918,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 400 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",400,1,1131.2772373056607,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",400,1,2513.842933749137,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",400,1,31273.503336181417,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",400,1,17038.023784778325,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",400,1,65314.00765431887,NaN,"ops/s"
Fri 22 Jan 19:46:59 GMT 2016
Platform: Linux haverstraw 3.10.0-229.20.1.el7.x86_64 #1 SMP Tue Nov 3 19:10:07 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux
Processor: model name	: Intel(R) Core(TM) i7 CPU         930  @ 2.80GHz
Number of Cores: 4
Blog Text
=========
In this release we compare ourselves against four other leading open source competitor products with a view to checking that the release remains competitive. Results are produced using JMH (a micro benchmark harness created by the OpenJDK project team available from http://openjdk.java.net/projects/code-tools/jmh/). 

We have attempted to configure each product on an equal footing by choosing sensible defaults for each tunable parameter and by ensuring that recovery is enabled, although we do configure narayana with the journal store, which is our best performing transaction log storage mechanism. If you have any recommendations for other transaction managers or how to tune the configuration then please let us know so that we can update our test job. 

The benchmark runs a transaction containing two dummy resources.

We will let the figures speak for themselves, suffice to say that when more and more threads are thrown at the workload we scale better showing that we have excellent control over parallelism. The actual figures are: 

Threads           A           B           C           D    Narayana
      1        1305        1269        1311           9        1329
     10        1277        2638        8609        6787       11261
     50        1266        2644       31417       17041       49157
    100        1338        2656       29279       19105       66509
    300        1227        2526       36237       16547       68671
    400        1131        2513       31273       17038       65314

GENERATED IMAGE FILE TO /home/hudson/jobs/tm-comparison/workspace/benchmark.png
