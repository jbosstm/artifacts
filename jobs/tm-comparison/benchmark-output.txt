JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 400 -r 60
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",400,1,1759.1280388536127,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",400,1,1518.3646000270603,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",400,1,31501.076251788258,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",400,1,30662.02231434715,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",400,1,163480.2656336703,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 300 -r 60
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",300,1,1764.5660043022326,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",300,1,1525.6894310575499,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",300,1,31882.70170555989,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",300,1,30707.675121332875,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",300,1,148499.37717541258,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 100 -r 60
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",100,1,1878.8622152949247,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",100,1,1525.4976705343843,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",100,1,28533.573283116053,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",100,1,30556.36831731126,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",100,1,62493.91470666396,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 50 -r 60
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",50,1,1830.6899443197028,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",50,1,1550.3004992888957,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",50,1,32140.519102512084,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",50,1,28958.58147693811,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",50,1,31443.78780682334,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 10 -r 60
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",10,1,1834.3011124775787,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",10,1,1550.499525273174,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",10,1,9967.336202641793,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",10,1,8801.732184947958,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",10,1,15768.704869427856,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 1 -r 60
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",1,1,1937.023645048618,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",1,1,1432.2824384488845,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",1,1,1081.7319342186463,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",1,1,15.085242821612242,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",1,1,1986.9914372694714,NaN,"ops/s"
Wed Jan 13 11:24:20 GMTST 2016
Processor model name	: Intel(R) Core(TM) i7-4900MQ CPU @ 2.80GHz
Number of Cores: 8
Blog Text
=========
In this release we compare ourselves against four other leading open source competitor products with a view to checking that the release remains competitive. Results are produced using JMH (a micro benchmark harness created by the OpenJDK project team available from http://openjdk.java.net/projects/code-tools/jmh/). 

We have attempted to configure each product on an equal footing by choosing sensible defaults for each tunable parameter and by ensuring that recovery is enabled, although we do configure narayana with the journal store, which is our best performing transaction log storage mechanism. If you have any recommendations for other transaction managers or how to tune the configuration then please let us know so that we can update our test job. 

The benchmark runs a transaction containing two dummy resources.

We will let the figures speak for themselves, suffice to say that when more and more threads are thrown at the workload we scale better showing that we have excellent control over parallelism. The actual figures are: 

Threads           A           B           C           D    Narayana
      1        1937        1432        1081          15        1986
     10        1834        1550        9967        8801       15768
     50        1830        1550       32140       28958       31443
    100        1878        1525       28533       30556       62493
    300        1764        1525       31882       30707      148499
    400        1759        1518       31501       30662      163480

GENERATED IMAGE FILE TO C:\Users\tom\projects\jbosstm\performance\benchmark.png
