JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: com.arjuna.ats.jta.xa.performance.*StoreBenchmark.*
Run arguments: -t 1  -r 30 -f 3 -wi 5 -i 5
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"com.arjuna.ats.jta.xa.performance.HQStoreBenchmark.testHQStore","thrpt",1,15,233.829709,1.998149,"ops/s"
"com.arjuna.ats.jta.xa.performance.JDBCStoreBenchmark.testJDBCStore","thrpt",1,15,33.086801,1.615360,"ops/s"
"com.arjuna.ats.jta.xa.performance.ShadowNoFileLockStoreBenchmark.testShadowNoFileLockStore","thrpt",1,15,69.612821,2.373620,"ops/s"
"com.arjuna.ats.jta.xa.performance.VolatileStoreBenchmark.testVolatileStore","thrpt",1,15,187239.466965,4772.283843,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: com.arjuna.ats.jta.xa.performance.*StoreBenchmark.*
Run arguments: -t 24  -r 30 -f 3 -wi 5 -i 5
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"com.arjuna.ats.jta.xa.performance.HQStoreBenchmark.testHQStore","thrpt",24,15,576.865974,148.610410,"ops/s"
"com.arjuna.ats.jta.xa.performance.JDBCStoreBenchmark.testJDBCStore","thrpt",24,15,320.177903,24.071075,"ops/s"
"com.arjuna.ats.jta.xa.performance.ShadowNoFileLockStoreBenchmark.testShadowNoFileLockStore","thrpt",24,15,211.160242,67.850380,"ops/s"
"com.arjuna.ats.jta.xa.performance.VolatileStoreBenchmark.testVolatileStore","thrpt",24,15,1189326.051923,158780.859427,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: com.arjuna.ats.jta.xa.performance.*StoreBenchmark.*
Run arguments: -t 240  -r 30 -f 3 -wi 5 -i 5
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"com.arjuna.ats.jta.xa.performance.HQStoreBenchmark.testHQStore","thrpt",240,15,4874.051038,226.946543,"ops/s"
"com.arjuna.ats.jta.xa.performance.JDBCStoreBenchmark.testJDBCStore","thrpt",240,15,376.386535,38.799341,"ops/s"
"com.arjuna.ats.jta.xa.performance.ShadowNoFileLockStoreBenchmark.testShadowNoFileLockStore","thrpt",240,15,620.787320,10.698744,"ops/s"
"com.arjuna.ats.jta.xa.performance.VolatileStoreBenchmark.testVolatileStore","thrpt",240,15,992929.379221,211247.804636,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: com.arjuna.ats.jta.xa.performance.*StoreBenchmark.*
Run arguments: -t 1600  -r 30 -f 3 -wi 5 -i 5
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"com.arjuna.ats.jta.xa.performance.HQStoreBenchmark.testHQStore","thrpt",1600,15,36090.611854,1056.492253,"ops/s"
"com.arjuna.ats.jta.xa.performance.JDBCStoreBenchmark.testJDBCStore","thrpt",1600,15,291.336479,22.536168,"ops/s"
"com.arjuna.ats.jta.xa.performance.ShadowNoFileLockStoreBenchmark.testShadowNoFileLockStore","thrpt",1600,15,718.353170,200.746772,"ops/s"
"com.arjuna.ats.jta.xa.performance.VolatileStoreBenchmark.testVolatileStore","thrpt",1600,15,1538773.074783,1629001.085328,"ops/s"
Wed 22 Jul 09:51:12 BST 2020
Platform: Linux unused 3.10.0-1062.9.1.el7.x86_64 #1 SMP Mon Dec 2 08:31:54 EST 2019 x86_64 x86_64 x86_64 GNU/Linux
Processor: model name	: Intel(R) Xeon(R) CPU E5-2690 v3 @ 2.60GHz
Number of Cores: 24
Blog Text
=========
/home/hudson/workspace/btny-pulls-performance
In this release we compare ourselves against four other leading open source competitor products with a view to checking that the release remains competitive. Results are produced using JMH (a micro benchmark harness created by the OpenJDK project team available from http://openjdk.java.net/projects/code-tools/jmh/). 

We have attempted to configure each product on an equal footing by choosing sensible defaults for each tunable parameter and by ensuring that recovery is enabled, although we do configure narayana with the journal store, which is our best performing transaction log storage mechanism. If you have any recommendations for other transaction managers or how to tune the configuration then please let us know so that we can update our test job. 

The benchmark runs a transaction containing two dummy resources.

We will let the figures speak for themselves, suffice to say that when more and more threads are thrown at the workload we scale better showing that we have excellent control over parallelism. The actual figures are: 

Threads           A           B           C           D
      1         233          33          69      187239
     24         576         320         211     1189326
    240        4874         376         620      992929
   1600       36090         291         718     1538773

GENERATED IMAGE FILE TO /home/hudson/workspace/btny-pulls-performance/benchmark.png
