JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 400 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",400,1,866.0674522787774,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",400,1,2709.753723204106,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",400,1,29862.76110275717,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",400,1,16346.622956459612,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",400,1,53068.79069331811,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 300 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",300,1,926.3505334872822,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",300,1,2677.5790422231844,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",300,1,32475.219016887266,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",300,1,16440.344579259407,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",300,1,45724.09725187777,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 100 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",100,1,1024.4403432882182,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",100,1,2593.8038058883976,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",100,1,29951.390252027937,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",100,1,18282.666892272744,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",100,1,19436.714020712294,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 50 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",50,1,1039.9915194342998,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",50,1,2760.065449458267,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",50,1,29121.690634547926,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",50,1,16067.409450583138,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",50,1,7193.758935099798,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 10 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",10,1,1149.183485959245,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",10,1,2742.609896398179,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",10,1,8352.2209470373,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",10,1,6541.6371812328725,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",10,1,4042.0056211571646,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 1 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",1,1,1009.4135837407458,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",1,1,1328.3468990005817,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",1,1,1238.3114384274722,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",1,1,9.819258859531478,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",1,1,1107.2681927495298,NaN,"ops/s"
Fri  8 Jan 12:29:49 GMT 2016
Processor model name	: Intel(R) Core(TM) i7 CPU         930  @ 2.80GHz
Number of Cores: 4
Blog Text
=========
In this release we compare ourselves against four other leading open source competitor products with a view to checking that the release remains competitive. Results are produced using JMH (a micro benchmark harness created by the OpenJDK project team available from http://openjdk.java.net/projects/code-tools/jmh/). 

We have attempted to configure each product on an equal footing by choosing sensible defaults for each tunable parameter and by ensuring that recovery is enabled, although we do configure narayana with the journal store, which is our best performing transaction log storage mechanism. If you have any recommendations for other transaction managers or how to tune the configuration then please let us know so that we can update our test job. 

The benchmark runs a transaction containing two dummy resources.

We will let the figures speak for themselves, suffice to say that when more and more threads are thrown at the workload we scale better showing that we have excellent control over parallelism. The actual figures are: 

Threads           A           B           C           D    Narayana
      1        1009        1328        1238           9        1107
     10        1149        2742        8352        6541        4042
     50        1039        2760       29121       16067        7193
    100        1024        2593       29951       18282       19436
    300         926        2677       32475       16440       45724
    400         866        2709       29862       16346       53068

GENERATED IMAGE FILE TO /home/hudson/jobs/tm-comparison/workspace/benchmark.png
