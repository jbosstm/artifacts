JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 1 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",1,1,1313.5995433225653,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",1,1,1341.9488814441097,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",1,1,1300.5894767654434,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",1,1,9.83554755072908,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",1,1,1032.8555705847539,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 10 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",10,1,1190.880175000777,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",10,1,2646.179613326215,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",10,1,8104.874552804968,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",10,1,6220.795353249446,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",10,1,9223.30893982,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 50 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",50,1,1294.9013806885773,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",50,1,2548.660254625265,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",50,1,29050.918242264685,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",50,1,16842.98647605961,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",50,1,42084.03708850804,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 100 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",100,1,1345.3060736692828,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",100,1,2685.3689432442984,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",100,1,27531.76771282319,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",100,1,18559.747950379176,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",100,1,52632.42631920939,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 300 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",300,1,1297.324458999739,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",300,1,2572.5366414795008,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",300,1,30599.22107233538,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",300,1,16709.23253619523,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",300,1,48837.66807907097,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 400 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",400,1,1263.1397874936845,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",400,1,2391.6541880265513,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",400,1,29135.899744039238,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",400,1,16788.524292242375,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",400,1,50176.48530774928,NaN,"ops/s"
Mon 18 Jan 21:24:05 GMT 2016
Platform: Linux haverstraw 3.10.0-229.20.1.el7.x86_64 #1 SMP Tue Nov 3 19:10:07 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux
Processor: model name	: Intel(R) Core(TM) i7 CPU         930  @ 2.80GHz
Number of Cores: 4
Blog Text
=========
In this release we compare ourselves against four other leading open source competitor products with a view to checking that the release remains competitive. Results are produced using JMH (a micro benchmark harness created by the OpenJDK project team available from http://openjdk.java.net/projects/code-tools/jmh/). 

We have attempted to configure each product on an equal footing by choosing sensible defaults for each tunable parameter and by ensuring that recovery is enabled, although we do configure narayana with the journal store, which is our best performing transaction log storage mechanism. If you have any recommendations for other transaction managers or how to tune the configuration then please let us know so that we can update our test job. 

The benchmark runs a transaction containing two dummy resources.

We will let the figures speak for themselves, suffice to say that when more and more threads are thrown at the workload we scale better showing that we have excellent control over parallelism. The actual figures are: 

Threads           A           B           C           D    Narayana
      1        1313        1341        1300           9        1032
     10        1190        2646        8104        6220        9223
     50        1294        2548       29050       16842       42084
    100        1345        2685       27531       18559       52632
    300        1297        2572       30599       16709       48837
    400        1263        2391       29135       16788       50176

GENERATED IMAGE FILE TO /home/hudson/jobs/tm-comparison/workspace/benchmark.png
