JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 400 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",400,1,872.0968987093128,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",400,1,2620.6360066320403,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",400,1,33462.117740444635,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",400,1,16262.160516004853,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",400,1,52618.95826078009,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 300 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",300,1,951.9087975176742,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",300,1,2747.378522424953,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",300,1,28741.012438930768,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",300,1,16903.872432824453,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",300,1,49085.653677491624,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 100 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",100,1,1076.6901888188538,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",100,1,2658.6877366147646,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",100,1,32592.029633034777,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",100,1,18939.15305413106,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",100,1,19300.9178476563,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 50 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",50,1,988.9846912679056,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",50,1,2514.8448473632334,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",50,1,29499.650609814984,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",50,1,15876.329214497433,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",50,1,5558.172163567264,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 10 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",10,1,1099.4945940782288,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",10,1,2565.1945126738883,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",10,1,7523.286781690556,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",10,1,6339.390680746275,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",10,1,3947.3871660243044,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 1 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",1,1,1031.5935663410687,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",1,1,1333.3956570845871,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",1,1,1309.4243796392732,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",1,1,9.829989462138412,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",1,1,1107.9444379344004,NaN,"ops/s"
Fri  8 Jan 14:44:06 GMT 2016
Processor model name	: Intel(R) Core(TM) i7 CPU         930  @ 2.80GHz
Number of Cores: 4
Blog Text
=========
In this release we compare ourselves against four other leading open source competitor products with a view to checking that the release remains competitive. Results are produced using JMH (a micro benchmark harness created by the OpenJDK project team available from http://openjdk.java.net/projects/code-tools/jmh/). 

We have attempted to configure each product on an equal footing by choosing sensible defaults for each tunable parameter and by ensuring that recovery is enabled, although we do configure narayana with the journal store, which is our best performing transaction log storage mechanism. If you have any recommendations for other transaction managers or how to tune the configuration then please let us know so that we can update our test job. 

The benchmark runs a transaction containing two dummy resources.

We will let the figures speak for themselves, suffice to say that when more and more threads are thrown at the workload we scale better showing that we have excellent control over parallelism. The actual figures are: 

Threads           A           B           C           D    Narayana
      1        1031        1333        1309           9        1107
     10        1099        2565        7523        6339        3947
     50         988        2514       29499       15876        5558
    100        1076        2658       32592       18939       19300
    300         951        2747       28741       16903       49085
    400         872        2620       33462       16262       52618

GENERATED IMAGE FILE TO /home/hudson/jobs/tm-comparison/workspace/benchmark.png
