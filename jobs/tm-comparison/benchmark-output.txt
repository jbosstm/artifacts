JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 1 -r 30
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",1,1,2551.4335976271313,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",1,1,10186.603743279866,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",1,1,4655.055821618094,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",1,1,9.94716275471441,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",1,1,1988.711467010241,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 10 -r 30
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",10,1,2954.22851314313,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",10,1,11758.64172166447,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",10,1,62706.76650584986,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",10,1,19851.09112198621,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",10,1,19766.447606719965,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 50 -r 30
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",50,1,2782.6994051091756,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",50,1,11551.142018078948,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",50,1,243797.82803718458,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",50,1,18296.75685068239,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",50,1,96110.16705613071,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 100 -r 30
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",100,1,2875.514353100621,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",100,1,11535.809730592555,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",100,1,234571.22015661554,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",100,1,18868.370775999294,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",100,1,175110.9720671066,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 300 -r 30
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",300,1,2700.3896158935163,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",300,1,11431.700762805429,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",300,1,229481.22123147734,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",300,1,19662.337457395897,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",300,1,205690.04814221148,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 400 -r 30
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",400,1,2684.2519456765267,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",400,1,11176.833168626326,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",400,1,224050.53088467335,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",400,1,20538.19194874998,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",400,1,193491.29068877565,NaN,"ops/s"
Sat  4 Nov 18:50:05 GMT 2017
Platform: Linux localhost.localdomain 3.10.0-693.2.2.el7.x86_64 #1 SMP Sat Sep 9 03:55:24 EDT 2017 x86_64 x86_64 x86_64 GNU/Linux
Processor: model name	: Intel(R) Xeon(R) CPU E5-2690 v3 @ 2.60GHz
Number of Cores: 24
Blog Text
=========
In this release we compare ourselves against four other leading open source competitor products with a view to checking that the release remains competitive. Results are produced using JMH (a micro benchmark harness created by the OpenJDK project team available from http://openjdk.java.net/projects/code-tools/jmh/). 

We have attempted to configure each product on an equal footing by choosing sensible defaults for each tunable parameter and by ensuring that recovery is enabled, although we do configure narayana with the journal store, which is our best performing transaction log storage mechanism. If you have any recommendations for other transaction managers or how to tune the configuration then please let us know so that we can update our test job. 

The benchmark runs a transaction containing two dummy resources.

We will let the figures speak for themselves, suffice to say that when more and more threads are thrown at the workload we scale better showing that we have excellent control over parallelism. The actual figures are: 

Threads           A           B           C           D    Narayana
      1        2551       10186        4655           9        1988
     10        2954       11758       62706       19851       19766
     50        2782       11551      243797       18296       96110
    100        2875       11535      234571       18868      175110
    300        2700       11431      229481       19662      205690
    400        2684       11176      224050       20538      193491

GENERATED IMAGE FILE TO /home/hudson/workspace/narayana-performance/benchmark.png
