JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 1 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",1,1,1456.0056835379407,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",1,1,1320.7159547712429,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",1,1,1330.104382879796,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",1,1,9.854652615704131,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",1,1,1235.8164083381462,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 10 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",10,1,1327.18058875233,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",10,1,2734.6148404208757,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",10,1,7951.815617109881,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",10,1,6520.796997036512,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",10,1,11416.382030510684,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 50 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",50,1,1335.6198107238517,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",50,1,2535.8213520160557,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",50,1,31315.701408090445,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",50,1,16479.745719841234,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",50,1,44056.290713588,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 100 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",100,1,1202.8730344784028,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",100,1,2558.5003418913234,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",100,1,28861.67092743019,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",100,1,19021.3858507749,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",100,1,66775.2226755224,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 300 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",300,1,1251.5660157856396,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",300,1,2705.4126681533858,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",300,1,29736.498048862195,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",300,1,16674.75888685216,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",300,1,65346.47242165216,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 400 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",400,1,1309.0175827139544,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",400,1,2699.133457716443,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",400,1,28005.426441079624,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",400,1,16332.150495083095,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",400,1,63985.774639285715,NaN,"ops/s"
Sat 27 Feb 08:16:21 GMT 2016
Platform: Linux haverstraw 3.10.0-229.20.1.el7.x86_64 #1 SMP Tue Nov 3 19:10:07 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux
Processor: model name	: Intel(R) Core(TM) i7 CPU         930  @ 2.80GHz
Number of Cores: 4
Blog Text
=========
In this release we compare ourselves against four other leading open source competitor products with a view to checking that the release remains competitive. Results are produced using JMH (a micro benchmark harness created by the OpenJDK project team available from http://openjdk.java.net/projects/code-tools/jmh/). 

We have attempted to configure each product on an equal footing by choosing sensible defaults for each tunable parameter and by ensuring that recovery is enabled, although we do configure narayana with the journal store, which is our best performing transaction log storage mechanism. If you have any recommendations for other transaction managers or how to tune the configuration then please let us know so that we can update our test job. 

The benchmark runs a transaction containing two dummy resources.

We will let the figures speak for themselves, suffice to say that when more and more threads are thrown at the workload we scale better showing that we have excellent control over parallelism. The actual figures are: 

Threads           A           B           C           D    Narayana
      1        1456        1320        1330           9        1235
     10        1327        2734        7951        6520       11416
     50        1335        2535       31315       16479       44056
    100        1202        2558       28861       19021       66775
    300        1251        2705       29736       16674       65346
    400        1309        2699       28005       16332       63985

GENERATED IMAGE FILE TO /home/hudson/jobs/tm-comparison/workspace/benchmark.png
