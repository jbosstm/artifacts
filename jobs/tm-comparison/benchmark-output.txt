JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 1 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",1,1,1318.5885070078953,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",1,1,1306.3274738285206,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",1,1,1304.0730232885956,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",1,1,9.82968456557787,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",1,1,1261.0978904171902,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 10 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",10,1,1243.237545214644,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",10,1,2635.1683571946637,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",10,1,8534.975746691502,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",10,1,6832.793127448011,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",10,1,10558.395107599225,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 50 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",50,1,1396.4865461638278,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",50,1,2549.8920843359024,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",50,1,30383.919866772638,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",50,1,16568.710708280607,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",50,1,49066.39508064817,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 100 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",100,1,1386.3753669741338,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",100,1,2612.609398675725,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",100,1,29696.243510101373,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",100,1,18597.439434335432,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",100,1,67535.6266070185,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 300 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",300,1,1277.5710094814967,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",300,1,2575.6100652832542,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",300,1,33317.37748150069,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",300,1,16590.528506383554,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",300,1,64410.36733593534,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 400 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",400,1,1263.2579795763613,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",400,1,2778.4808683323163,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",400,1,28927.552841410692,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",400,1,16213.072901272531,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",400,1,69474.41879029824,NaN,"ops/s"
Sat  2 Apr 08:16:39 BST 2016
Platform: Linux haverstraw 3.10.0-229.20.1.el7.x86_64 #1 SMP Tue Nov 3 19:10:07 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux
Processor: model name	: Intel(R) Core(TM) i7 CPU         930  @ 2.80GHz
Number of Cores: 4
Blog Text
=========
In this release we compare ourselves against four other leading open source competitor products with a view to checking that the release remains competitive. Results are produced using JMH (a micro benchmark harness created by the OpenJDK project team available from http://openjdk.java.net/projects/code-tools/jmh/). 

We have attempted to configure each product on an equal footing by choosing sensible defaults for each tunable parameter and by ensuring that recovery is enabled, although we do configure narayana with the journal store, which is our best performing transaction log storage mechanism. If you have any recommendations for other transaction managers or how to tune the configuration then please let us know so that we can update our test job. 

The benchmark runs a transaction containing two dummy resources.

We will let the figures speak for themselves, suffice to say that when more and more threads are thrown at the workload we scale better showing that we have excellent control over parallelism. The actual figures are: 

Threads           A           B           C           D    Narayana
      1        1318        1306        1304           9        1261
     10        1243        2635        8534        6832       10558
     50        1396        2549       30383       16568       49066
    100        1386        2612       29696       18597       67535
    300        1277        2575       33317       16590       64410
    400        1263        2778       28927       16213       69474

GENERATED IMAGE FILE TO /home/hudson/jobs/tm-comparison/workspace/benchmark.png
