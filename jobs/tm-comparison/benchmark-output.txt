JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 1 -r 30
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",1,1,1337.1840984044388,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",1,1,1302.7352907975942,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",1,1,1366.0865075785737,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",1,1,9.842581310117062,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",1,1,1242.7956240390215,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 10 -r 30
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",10,1,1491.7067847116818,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",10,1,2297.6876591507585,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",10,1,6951.85222546903,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",10,1,6935.968102662106,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",10,1,10041.595275363667,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 50 -r 30
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",50,1,1113.0031102327705,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",50,1,2562.3186399944393,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",50,1,27802.31425490385,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",50,1,14213.862521467338,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",50,1,45286.19744058971,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 100 -r 30
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",100,1,1109.2005557326015,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",100,1,2854.8967402608446,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",100,1,29245.317794056507,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",100,1,16956.319451591746,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",100,1,66658.00198327917,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 300 -r 30
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",300,1,1378.7532268971183,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",300,1,2352.4656788726456,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",300,1,29681.091573824324,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",300,1,16732.5693014577,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",300,1,63599.29744158428,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 400 -r 30
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",400,1,1254.0737293191037,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",400,1,2503.597069720049,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",400,1,35109.16320247611,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",400,1,17720.165598560394,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",400,1,57018.24306804968,NaN,"ops/s"
Wed 24 May 10:33:53 BST 2017
Platform: Linux haverstraw 3.10.0-229.20.1.el7.x86_64 #1 SMP Tue Nov 3 19:10:07 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux
Processor: model name	: Intel(R) Core(TM) i7 CPU         930  @ 2.80GHz
Number of Cores: 4
Blog Text
=========
In this release we compare ourselves against four other leading open source competitor products with a view to checking that the release remains competitive. Results are produced using JMH (a micro benchmark harness created by the OpenJDK project team available from http://openjdk.java.net/projects/code-tools/jmh/). 

We have attempted to configure each product on an equal footing by choosing sensible defaults for each tunable parameter and by ensuring that recovery is enabled, although we do configure narayana with the journal store, which is our best performing transaction log storage mechanism. If you have any recommendations for other transaction managers or how to tune the configuration then please let us know so that we can update our test job. 

The benchmark runs a transaction containing two dummy resources.

We will let the figures speak for themselves, suffice to say that when more and more threads are thrown at the workload we scale better showing that we have excellent control over parallelism. The actual figures are: 

Threads           A           B           C           D    Narayana
      1        1337        1302        1366           9        1242
     10        1491        2297        6951        6935       10041
     50        1113        2562       27802       14213       45286
    100        1109        2854       29245       16956       66658
    300        1378        2352       29681       16732       63599
    400        1254        2503       35109       17720       57018

GENERATED IMAGE FILE TO /home/hudson/jobs/narayana-benchmarks/workspace/benchmark.png
