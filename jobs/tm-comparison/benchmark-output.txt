JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 1 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",1,1,1394.8574167609277,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",1,1,1303.2508177505533,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",1,1,1278.100435684042,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",1,1,9.856071041347699,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",1,1,1026.4747858181202,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 10 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",10,1,1401.8706959187748,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",10,1,2640.371539438489,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",10,1,7528.976063573332,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",10,1,7122.266012361188,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",10,1,9990.65538715603,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 50 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",50,1,1241.127959615747,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",50,1,2674.4140774344137,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",50,1,33736.189561676474,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",50,1,16514.707595470067,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",50,1,44123.88691930859,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 100 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",100,1,1327.7537125261767,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",100,1,2623.9223511541686,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",100,1,28822.733154460693,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",100,1,18799.499364110146,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",100,1,52241.98628536343,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 300 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",300,1,1210.1031672603376,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",300,1,2627.7998915659473,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",300,1,26453.68249565023,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",300,1,16204.983916565385,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",300,1,56816.26167009602,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 400 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",400,1,1157.767196128351,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",400,1,2526.749772815409,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",400,1,29932.964800029673,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",400,1,16188.472306075539,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",400,1,47895.75150309678,NaN,"ops/s"
Wed 20 Jan 11:08:32 GMT 2016
Platform: Linux haverstraw 3.10.0-229.20.1.el7.x86_64 #1 SMP Tue Nov 3 19:10:07 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux
Processor: model name	: Intel(R) Core(TM) i7 CPU         930  @ 2.80GHz
Number of Cores: 4
Blog Text
=========
In this release we compare ourselves against four other leading open source competitor products with a view to checking that the release remains competitive. Results are produced using JMH (a micro benchmark harness created by the OpenJDK project team available from http://openjdk.java.net/projects/code-tools/jmh/). 

We have attempted to configure each product on an equal footing by choosing sensible defaults for each tunable parameter and by ensuring that recovery is enabled, although we do configure narayana with the journal store, which is our best performing transaction log storage mechanism. If you have any recommendations for other transaction managers or how to tune the configuration then please let us know so that we can update our test job. 

The benchmark runs a transaction containing two dummy resources.

We will let the figures speak for themselves, suffice to say that when more and more threads are thrown at the workload we scale better showing that we have excellent control over parallelism. The actual figures are: 

Threads           A           B           C           D    Narayana
      1        1394        1303        1278           9        1026
     10        1401        2640        7528        7122        9990
     50        1241        2674       33736       16514       44123
    100        1327        2623       28822       18799       52241
    300        1210        2627       26453       16204       56816
    400        1157        2526       29932       16188       47895

GENERATED IMAGE FILE TO /home/hudson/jobs/tm-comparison/workspace/benchmark.png
