JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 1 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",1,1,1249.426412972084,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",1,1,1244.146065231735,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",1,1,1333.7507578446944,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",1,1,9.851972220458732,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",1,1,1210.0483145264054,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 10 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",10,1,1163.1188012594878,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",10,1,2639.7336063169123,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",10,1,8256.829406699891,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",10,1,6198.595607452598,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",10,1,10508.236073789765,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 50 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",50,1,1335.3181109671343,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",50,1,2853.978955801522,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",50,1,33796.07479708179,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",50,1,16176.717669015556,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",50,1,47032.86837522431,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 100 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",100,1,1187.8491521440742,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",100,1,2680.7984051838203,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",100,1,30863.22780337103,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",100,1,18607.05898734016,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",100,1,67988.91124157919,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 300 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",300,1,1187.5225425444137,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",300,1,2849.0176715385637,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",300,1,29667.016147961484,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",300,1,16295.337894662007,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",300,1,72485.6958811558,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 400 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",400,1,1233.7281412011032,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",400,1,2720.767535860919,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",400,1,27902.973255681252,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",400,1,16675.816935286904,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",400,1,72720.8905489199,NaN,"ops/s"
Fri  1 Apr 17:30:38 BST 2016
Platform: Linux haverstraw 3.10.0-229.20.1.el7.x86_64 #1 SMP Tue Nov 3 19:10:07 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux
Processor: model name	: Intel(R) Core(TM) i7 CPU         930  @ 2.80GHz
Number of Cores: 4
Blog Text
=========
In this release we compare ourselves against four other leading open source competitor products with a view to checking that the release remains competitive. Results are produced using JMH (a micro benchmark harness created by the OpenJDK project team available from http://openjdk.java.net/projects/code-tools/jmh/). 

We have attempted to configure each product on an equal footing by choosing sensible defaults for each tunable parameter and by ensuring that recovery is enabled, although we do configure narayana with the journal store, which is our best performing transaction log storage mechanism. If you have any recommendations for other transaction managers or how to tune the configuration then please let us know so that we can update our test job. 

The benchmark runs a transaction containing two dummy resources.

We will let the figures speak for themselves, suffice to say that when more and more threads are thrown at the workload we scale better showing that we have excellent control over parallelism. The actual figures are: 

Threads           A           B           C           D    Narayana
      1        1249        1244        1333           9        1210
     10        1163        2639        8256        6198       10508
     50        1335        2853       33796       16176       47032
    100        1187        2680       30863       18607       67988
    300        1187        2849       29667       16295       72485
    400        1233        2720       27902       16675       72720

GENERATED IMAGE FILE TO /home/hudson/jobs/tm-comparison/workspace/benchmark.png
