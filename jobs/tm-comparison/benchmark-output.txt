JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 1 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",1,1,1346.5308433563298,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",1,1,1338.224871908472,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",1,1,1331.8074346685717,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",1,1,9.839168308540087,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",1,1,1079.6545563447455,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 10 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",10,1,1348.843792117781,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",10,1,2513.4014660065923,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",10,1,7830.067276824919,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",10,1,6401.157616837844,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",10,1,9601.466157814117,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 50 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",50,1,1357.302089006823,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",50,1,2483.0948389000755,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",50,1,30491.55268714851,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",50,1,16157.916033917196,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",50,1,40254.9107701812,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 100 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",100,1,1507.8430277739349,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",100,1,2388.7585725089593,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",100,1,28496.175479901594,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",100,1,19197.96279188366,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",100,1,56717.002404989784,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 300 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",300,1,1247.6853708410274,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",300,1,2611.8123049464193,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",300,1,30407.93049357285,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",300,1,16725.78577494216,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",300,1,51866.01711140406,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 400 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",400,1,1272.0900249824522,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",400,1,2652.0252837116145,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",400,1,26247.54423468132,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",400,1,15812.393842711708,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",400,1,52293.364777907,NaN,"ops/s"
Tue 19 Jan 11:09:04 GMT 2016
Platform: Linux haverstraw 3.10.0-229.20.1.el7.x86_64 #1 SMP Tue Nov 3 19:10:07 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux
Processor: model name	: Intel(R) Core(TM) i7 CPU         930  @ 2.80GHz
Number of Cores: 4
Blog Text
=========
In this release we compare ourselves against four other leading open source competitor products with a view to checking that the release remains competitive. Results are produced using JMH (a micro benchmark harness created by the OpenJDK project team available from http://openjdk.java.net/projects/code-tools/jmh/). 

We have attempted to configure each product on an equal footing by choosing sensible defaults for each tunable parameter and by ensuring that recovery is enabled, although we do configure narayana with the journal store, which is our best performing transaction log storage mechanism. If you have any recommendations for other transaction managers or how to tune the configuration then please let us know so that we can update our test job. 

The benchmark runs a transaction containing two dummy resources.

We will let the figures speak for themselves, suffice to say that when more and more threads are thrown at the workload we scale better showing that we have excellent control over parallelism. The actual figures are: 

Threads           A           B           C           D    Narayana
      1        1346        1338        1331           9        1079
     10        1348        2513        7830        6401        9601
     50        1357        2483       30491       16157       40254
    100        1507        2388       28496       19197       56717
    300        1247        2611       30407       16725       51866
    400        1272        2652       26247       15812       52293

GENERATED IMAGE FILE TO /home/hudson/jobs/tm-comparison/workspace/benchmark.png
