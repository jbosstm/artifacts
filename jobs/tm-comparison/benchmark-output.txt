JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 1 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",1,1,1045.1313142777328,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",1,1,1462.1549506697409,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",1,1,1323.7639689657587,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",1,1,9.847734895728971,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",1,1,201.15309383515074,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 10 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",10,1,1084.997783434058,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",10,1,2593.0638560142247,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",10,1,7749.181232441677,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",10,1,6744.12623317557,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",10,1,1967.64302925099,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 50 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",50,1,997.6954465575876,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",50,1,2740.9295577105445,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",50,1,27867.218816826844,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",50,1,16272.38898380137,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",50,1,9767.912086646407,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 100 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",100,1,1035.6483399893543,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",100,1,2671.9116987609723,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",100,1,27223.861676523262,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",100,1,19270.17017611212,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",100,1,19867.78258290864,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 300 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",300,1,921.4091581912274,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",300,1,2641.672714341648,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",300,1,32313.01076658229,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",300,1,17302.616168204244,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",300,1,46233.87004506827,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 400 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",400,1,917.3759701386288,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",400,1,2786.330881357542,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",400,1,31053.373994326867,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",400,1,16956.60997649876,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",400,1,53996.98288130987,NaN,"ops/s"
Fri  8 Jan 16:11:07 GMT 2016
Processor model name	: Intel(R) Core(TM) i7 CPU         930  @ 2.80GHz
Number of Cores: 4
Blog Text
=========
In this release we compare ourselves against four other leading open source competitor products with a view to checking that the release remains competitive. Results are produced using JMH (a micro benchmark harness created by the OpenJDK project team available from http://openjdk.java.net/projects/code-tools/jmh/). 

We have attempted to configure each product on an equal footing by choosing sensible defaults for each tunable parameter and by ensuring that recovery is enabled, although we do configure narayana with the journal store, which is our best performing transaction log storage mechanism. If you have any recommendations for other transaction managers or how to tune the configuration then please let us know so that we can update our test job. 

The benchmark runs a transaction containing two dummy resources.

We will let the figures speak for themselves, suffice to say that when more and more threads are thrown at the workload we scale better showing that we have excellent control over parallelism. The actual figures are: 

Threads           A           B           C           D    Narayana
      1        1045        1462        1323           9         201
     10        1084        2593        7749        6744        1967
     50         997        2740       27867       16272        9767
    100        1035        2671       27223       19270       19867
    300         921        2641       32313       17302       46233
    400         917        2786       31053       16956       53996

GENERATED IMAGE FILE TO /home/hudson/jobs/tm-comparison/workspace/benchmark.png
