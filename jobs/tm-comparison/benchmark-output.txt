JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: com.arjuna.ats.jta.xa.performance.*StoreBenchmark.*
Run arguments: -t 1 -r 25 -f 2 -wi 5 -i 5
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"com.arjuna.ats.jta.xa.performance.HQStoreBenchmark.testHQStore","thrpt",1,10,3189.342790,5.872344,"ops/s"
"com.arjuna.ats.jta.xa.performance.JDBCStoreBenchmark.testJDBCStore","thrpt",1,10,34.233771,3.404614,"ops/s"
"com.arjuna.ats.jta.xa.performance.ShadowNoFileLockStoreBenchmark.testShadowNoFileLockStore","thrpt",1,10,2252.297557,16.096241,"ops/s"
"com.arjuna.ats.jta.xa.performance.VolatileStoreBenchmark.testVolatileStore","thrpt",1,10,160998.679397,62552.910318,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: com.arjuna.ats.jta.xa.performance.*StoreBenchmark.*
Run arguments: -t 24 -r 20 -f 1 -wi 3 -i 5
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"com.arjuna.ats.jta.xa.performance.HQStoreBenchmark.testHQStore","thrpt",24,5,77877.085014,150.484873,"ops/s"
"com.arjuna.ats.jta.xa.performance.JDBCStoreBenchmark.testJDBCStore","thrpt",24,5,311.678615,83.131234,"ops/s"
"com.arjuna.ats.jta.xa.performance.ShadowNoFileLockStoreBenchmark.testShadowNoFileLockStore","thrpt",24,5,14082.072956,669.078871,"ops/s"
"com.arjuna.ats.jta.xa.performance.VolatileStoreBenchmark.testVolatileStore","thrpt",24,5,652281.246016,3931.188412,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: com.arjuna.ats.jta.xa.performance.*StoreBenchmark.*
Run arguments: -t 240 -r 20 -f 1 -wi 3 -i 5
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"com.arjuna.ats.jta.xa.performance.HQStoreBenchmark.testHQStore","thrpt",240,5,412948.737501,43443.857812,"ops/s"
"com.arjuna.ats.jta.xa.performance.JDBCStoreBenchmark.testJDBCStore","thrpt",240,5,353.703408,209.829756,"ops/s"
"com.arjuna.ats.jta.xa.performance.ShadowNoFileLockStoreBenchmark.testShadowNoFileLockStore","thrpt",240,5,12087.172597,287.554033,"ops/s"
"com.arjuna.ats.jta.xa.performance.VolatileStoreBenchmark.testVolatileStore","thrpt",240,5,1161905.280175,20425.683718,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: com.arjuna.ats.jta.xa.performance.*StoreBenchmark.*
Run arguments: -t 1600 -r 20 -f 1 -wi 3 -i 5
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"com.arjuna.ats.jta.xa.performance.HQStoreBenchmark.testHQStore","thrpt",1600,5,327214.587219,21645.219393,"ops/s"
"com.arjuna.ats.jta.xa.performance.JDBCStoreBenchmark.testJDBCStore","thrpt",1600,5,259.297241,46.929667,"ops/s"
"com.arjuna.ats.jta.xa.performance.ShadowNoFileLockStoreBenchmark.testShadowNoFileLockStore","thrpt",1600,5,10735.836267,309.322762,"ops/s"
"com.arjuna.ats.jta.xa.performance.VolatileStoreBenchmark.testVolatileStore","thrpt",1600,5,1938533.638426,3441981.541833,"ops/s"
Sun 15 Dec 13:02:35 GMT 2019
Platform: Linux unused 3.10.0-1062.1.1.el7.x86_64 #1 SMP Tue Aug 13 18:39:59 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux
Processor: model name	: Intel(R) Xeon(R) CPU E5-2690 v3 @ 2.60GHz
Number of Cores: 24
Blog Text
=========
/home/hudson/workspace/narayana-performance
In this release we compare ourselves against four other leading open source competitor products with a view to checking that the release remains competitive. Results are produced using JMH (a micro benchmark harness created by the OpenJDK project team available from http://openjdk.java.net/projects/code-tools/jmh/). 

We have attempted to configure each product on an equal footing by choosing sensible defaults for each tunable parameter and by ensuring that recovery is enabled, although we do configure narayana with the journal store, which is our best performing transaction log storage mechanism. If you have any recommendations for other transaction managers or how to tune the configuration then please let us know so that we can update our test job. 

The benchmark runs a transaction containing two dummy resources.

We will let the figures speak for themselves, suffice to say that when more and more threads are thrown at the workload we scale better showing that we have excellent control over parallelism. The actual figures are: 

Threads           A           B           C           D
      1        3189          34        2252      160998
     24       77877         311       14082      652281
    240      412948         353       12087     1161905
   1600      327214         259       10735     1938533

GENERATED IMAGE FILE TO /home/hudson/workspace/narayana-performance/benchmark.png
