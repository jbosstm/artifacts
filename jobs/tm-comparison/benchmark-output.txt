JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 400 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",400,1,874.7112002907667,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",400,1,2652.65264026695,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",400,1,26911.63437464181,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",400,1,16156.781348454302,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",400,1,50984.33397598873,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 300 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",300,1,913.0944780686908,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",300,1,2466.3535170310956,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",300,1,30463.063795831687,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",300,1,16642.203109265785,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",300,1,46852.8340156303,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 100 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",100,1,1019.0218966654597,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",100,1,2815.8048061849477,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",100,1,29028.29251126284,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",100,1,19089.541350360738,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",100,1,19655.016224147457,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 50 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",50,1,987.8363872410373,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",50,1,2677.8790614177633,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",50,1,30940.091091521717,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",50,1,16603.735417425993,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",50,1,5887.509536525141,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 10 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",10,1,1047.4951414705472,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",10,1,2648.862152531634,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",10,1,6575.711694582383,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",10,1,6950.958544643459,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",10,1,3935.443485521928,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 1 -r 100
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",1,1,1121.9225780940048,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",1,1,1335.8177629113961,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",1,1,1287.8711429029884,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",1,1,9.833259162914642,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",1,1,1141.2592021394307,NaN,"ops/s"
Fri  8 Jan 13:41:52 GMT 2016
Processor model name	: Intel(R) Core(TM) i7 CPU         930  @ 2.80GHz
Number of Cores: 4
Blog Text
=========
In this release we compare ourselves against four other leading open source competitor products with a view to checking that the release remains competitive. Results are produced using JMH (a micro benchmark harness created by the OpenJDK project team available from http://openjdk.java.net/projects/code-tools/jmh/). 

We have attempted to configure each product on an equal footing by choosing sensible defaults for each tunable parameter and by ensuring that recovery is enabled, although we do configure narayana with the journal store, which is our best performing transaction log storage mechanism. If you have any recommendations for other transaction managers or how to tune the configuration then please let us know so that we can update our test job. 

The benchmark runs a transaction containing two dummy resources.

We will let the figures speak for themselves, suffice to say that when more and more threads are thrown at the workload we scale better showing that we have excellent control over parallelism. The actual figures are: 

Threads           A           B           C           D    Narayana
      1        1121        1335        1287           9        1141
     10        1047        2648        6575        6950        3935
     50         987        2677       30940       16603        5887
    100        1019        2815       29028       19089       19655
    300         913        2466       30463       16642       46852
    400         874        2652       26911       16156       50984

GENERATED IMAGE FILE TO /home/hudson/jobs/tm-comparison/workspace/benchmark.png
