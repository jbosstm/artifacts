JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 1 -r 30
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",1,1,1424.166196379091,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",1,1,1273.4463713100583,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",1,1,1308.538519887451,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",1,1,9.894937806942972,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",1,1,1247.7882252721095,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 10 -r 30
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",10,1,1138.9787546287573,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",10,1,2414.1089284600807,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",10,1,7449.443494091561,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",10,1,8168.335723516356,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",10,1,9735.906426244379,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 50 -r 30
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",50,1,1426.6217391976352,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",50,1,2469.6710590095677,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",50,1,28998.558878322554,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",50,1,15949.51991954801,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",50,1,46184.14615887755,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 100 -r 30
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",100,1,1295.7749906271033,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",100,1,2427.6962713826656,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",100,1,24865.701883172074,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",100,1,16477.044056915594,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",100,1,64610.82365845704,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 300 -r 30
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",300,1,1156.6281182130033,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",300,1,2396.0509286173524,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",300,1,27681.809067726856,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",300,1,16222.741204053997,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",300,1,63696.112535080545,NaN,"ops/s"
JMH Benchmarks Results

Module: ArjunaJTA/jta
Pattern: io.narayana.perf.product.*Comparison.*
Run arguments: -foe -i 1 -wi 4 -f 1 -t 400 -r 30
Run output:
"Benchmark","Mode","Threads","Samples","Score","Score Error (99.9%)","Unit"
"io.narayana.perf.product.AtomikosComparison.test","thrpt",400,1,1244.2382712993701,NaN,"ops/s"
"io.narayana.perf.product.BitronixComparison.test","thrpt",400,1,2704.116421564298,NaN,"ops/s"
"io.narayana.perf.product.GeronimoComparison.test","thrpt",400,1,21600.630911769065,NaN,"ops/s"
"io.narayana.perf.product.JotmComparison.test","thrpt",400,1,15098.868122782827,NaN,"ops/s"
"io.narayana.perf.product.NarayanaComparison.test","thrpt",400,1,61717.796126373694,NaN,"ops/s"
Wed 24 May 11:29:31 BST 2017
Platform: Linux haverstraw 3.10.0-229.20.1.el7.x86_64 #1 SMP Tue Nov 3 19:10:07 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux
Processor: model name	: Intel(R) Core(TM) i7 CPU         930  @ 2.80GHz
Number of Cores: 4
Blog Text
=========
In this release we compare ourselves against four other leading open source competitor products with a view to checking that the release remains competitive. Results are produced using JMH (a micro benchmark harness created by the OpenJDK project team available from http://openjdk.java.net/projects/code-tools/jmh/). 

We have attempted to configure each product on an equal footing by choosing sensible defaults for each tunable parameter and by ensuring that recovery is enabled, although we do configure narayana with the journal store, which is our best performing transaction log storage mechanism. If you have any recommendations for other transaction managers or how to tune the configuration then please let us know so that we can update our test job. 

The benchmark runs a transaction containing two dummy resources.

We will let the figures speak for themselves, suffice to say that when more and more threads are thrown at the workload we scale better showing that we have excellent control over parallelism. The actual figures are: 

Threads           A           B           C           D    Narayana
      1        1424        1273        1308           9        1247
     10        1138        2414        7449        8168        9735
     50        1426        2469       28998       15949       46184
    100        1295        2427       24865       16477       64610
    300        1156        2396       27681       16222       63696
    400        1244        2704       21600       15098       61717

GENERATED IMAGE FILE TO /home/hudson/jobs/narayana-benchmarks/workspace/benchmark.png
